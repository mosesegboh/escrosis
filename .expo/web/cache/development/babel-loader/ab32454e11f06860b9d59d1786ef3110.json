{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\jobs\\\\MyProjects\\\\react-native\\\\my-app\\\\App.js\";\nimport React, { useState } from 'react';\nimport RootStack from \"./navigators/RootStack\";\nimport AppLoading from 'expo-app-loading';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { CredentialsContext } from \"./components/CredentialsContext\";\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      appReady = _useState2[0],\n      setAppReady = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      storedCredentials = _useState4[0],\n      setStoredCredentials = _useState4[1];\n\n  var checkLoginCredentials = function checkLoginCredentials() {\n    AsyncStorage.getItem('myAppCredentials').then(function (result) {\n      if (result !== null) {\n        setStoredCredentials(JSON.parse(result));\n      } else {\n        setStoredCredentials(null);\n      }\n    }).catch(function (error) {\n      return console.log(error);\n    });\n  };\n\n  if (!appReady) {\n    return React.createElement(AppLoading, {\n      startAsync: checkLoginCredentials,\n      onFinish: function onFinish() {\n        return setAppReady(true);\n      },\n      onError: console.warn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return React.createElement(CredentialsContext.Provider, {\n    value: {\n      storedCredentials: storedCredentials,\n      setStoredCredentials: setStoredCredentials\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, React.createElement(RootStack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/jobs/MyProjects/react-native/my-app/App.js"],"names":["React","useState","RootStack","AppLoading","AsyncStorage","CredentialsContext","App","appReady","setAppReady","storedCredentials","setStoredCredentials","checkLoginCredentials","getItem","then","result","JSON","parse","catch","error","console","log","warn"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAKA,OAAOC,SAAP;AAGA,OAAOC,UAAP,MAAuB,kBAAvB;AAGA,OAAQC,YAAR,MAA2B,2CAA3B;AAGA,SAASC,kBAAT;AAIA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAgCL,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOM,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAkDP,QAAQ,CAAC,EAAD,CAA1D;AAAA;AAAA,MAAOQ,iBAAP;AAAA,MAA0BC,oBAA1B;;AAEA,MAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAClCP,IAAAA,YAAY,CAACQ,OAAb,CAAqB,kBAArB,EACGC,IADH,CACQ,UAACC,MAAD,EAAY;AAChB,UAAIA,MAAM,KAAK,IAAf,EAAqB;AACnBJ,QAAAA,oBAAoB,CAACK,IAAI,CAACC,KAAL,CAAWF,MAAX,CAAD,CAApB;AACD,OAFD,MAEK;AACHJ,QAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD;AACF,KAPH,EAQGO,KARH,CAQS,UAAAC,KAAK;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAJ;AAAA,KARd;AASD,GAVD;;AAYA,MAAI,CAACX,QAAL,EAAe;AACb,WAAO,oBAAC,UAAD;AAAY,MAAA,UAAU,EAAEI,qBAAxB;AAA+C,MAAA,QAAQ,EAAI;AAAA,eAAMH,WAAW,CAAC,IAAD,CAAjB;AAAA,OAA3D;AAAoF,MAAA,OAAO,EAAEW,OAAO,CAACE,IAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AACD,SACE,oBAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAACZ,MAAAA,iBAAiB,EAAjBA,iBAAD;AAAoBC,MAAAA,oBAAoB,EAApBA;AAApB,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD","sourcesContent":["import React, {useState} from 'react';\n// import { StatusBar } from 'expo-status-bar';\n\n\n//react navigation stack\nimport RootStack from './navigators/RootStack';\n\n//apploading\nimport AppLoading from 'expo-app-loading';\n\n//async storage\nimport  AsyncStorage  from '@react-native-async-storage/async-storage';\n\n//credentials context\nimport { CredentialsContext } from './components/CredentialsContext';\n\n\n\nexport default function App() {\n  const [appReady, setAppReady] = useState(false);\n  const [storedCredentials, setStoredCredentials] = useState(\"\");\n\n  const checkLoginCredentials = () => {\n    AsyncStorage.getItem('myAppCredentials')\n      .then((result) => {\n        if (result !== null) {\n          setStoredCredentials(JSON.parse(result))\n        }else{\n          setStoredCredentials(null);\n        }\n      })\n      .catch(error => console.log(error));\n  }\n\n  if (!appReady) {\n    return <AppLoading startAsync={checkLoginCredentials} onFinish = {() => setAppReady(true)} onError={console.warn} />\n  }\n  return (\n    <CredentialsContext.Provider value={{storedCredentials, setStoredCredentials}}>\n      <RootStack />\n     </CredentialsContext.Provider>\n     );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}