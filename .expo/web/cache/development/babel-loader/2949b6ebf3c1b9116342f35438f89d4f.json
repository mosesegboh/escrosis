{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"label\", \"icon\", \"hidePassword\", \"isPassword\", \"setHidePassword\"];\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\jobs\\\\MyProjects\\\\react-native\\\\my-app\\\\screens\\\\Login.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { Formik } from 'formik';\nimport { Octicons, Ionicons, Fontisto } from '@expo/vector-icons';\nimport * as Google from 'expo-google-app-auth';\nimport { StyledContainer, InnerContainer, PageLogo, PageTitle, SubTitle, StyledFormArea, LeftIcon, StyledInputLabel, StyledTextInput, RightIcon, StyledButton, ButtonText, Colors, MsgBox, Line, ExtraView, ExtraText, TextLink, TextLinkContent } from \"./../components/styles\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nvar brand = Colors.brand,\n    darkLight = Colors.darkLight,\n    primary = Colors.primary;\nimport KeyboardAvoidingWrapper from \"./../components/KeyboardAvoidingWrapper\";\nimport axios from 'axios';\n\nvar Login = function Login(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      hidePassword = _useState2[0],\n      setHidePassword = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      message = _useState4[0],\n      setMessage = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      messageType = _useState6[0],\n      setMessageType = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      googleSubmitting = _useState8[0],\n      setGoogleSubmitting = _useState8[1];\n\n  var handleLogin = function handleLogin(credentials, setSubmitting) {\n    handleMessage(null);\n    var config = {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Accept': 'application/json'\n    };\n    var url = 'http://10.91.20.144:5000/user/signin';\n    axios.post(url, credentials, config).then(function (response) {\n      var result = response.data;\n      var message = result.message,\n          status = result.status,\n          data = result.data;\n\n      if (status !== 'SUCCESS') {\n        handleMessage(message, status);\n      } else {\n        navigation.navigate('Welcome', _objectSpread({}, data[0]));\n      }\n\n      setSubmitting(false);\n    }).catch(function (error) {\n      console.log(error);\n      setSubmitting(false);\n      handleMessage(\"An error occured. Check your network and try again!\");\n    });\n  };\n\n  var handleMessage = function handleMessage(message) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'FAILED';\n    setMessage(message);\n    setMessageType(type);\n  };\n\n  var handleGoogleSignin = function handleGoogleSignin() {\n    setGoogleSubmitting(true);\n    var config = {\n      iosClientId: \"516648526837-00s13ttt11q5aacah9imiam3kngre6o9.apps.googleusercontent.com\",\n      androidClientId: \"516648526837-ghdae77v0ukj8epok8jdgtoglckiabs3.apps.googleusercontent.com\",\n      scopes: ['profile', 'email']\n    };\n    Google.logInAsync(config).then(function (result) {\n      var type = result.type,\n          user = result.user;\n\n      if (type == 'success') {\n        var email = user.email,\n            name = user.name,\n            photoUrl = user.photoUrl;\n        handleMessage('Google Sign in successful', 'SUCCESS');\n        setTimeout(function () {\n          return navigation.navigate('Welcome', {\n            email: email,\n            name: name,\n            photoUrl: photoUrl\n          });\n        }, 1000);\n      } else {\n        handleMessage('Google sign in was cancelled!');\n      }\n\n      setGoogleSubmitting(false);\n    }).catch(function (error) {\n      console.log(error);\n      handleMessage('An error occured. Check your network and try again');\n      setGoogleSubmitting(false);\n    });\n  };\n\n  return React.createElement(KeyboardAvoidingWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, React.createElement(StyledContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, React.createElement(StatusBar, {\n    style: \"dark\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }), React.createElement(InnerContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, React.createElement(PageLogo, {\n    resizeMode: \"cover\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }), React.createElement(PageTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, \"Escrosis\"), React.createElement(SubTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, \"Account Login\"), React.createElement(Formik, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    onSubmit: function onSubmit(values, _ref2) {\n      var setSubmitting = _ref2.setSubmitting;\n\n      if (values.email == '' || values.password == '') {\n        handleMessage('Please fill all fields');\n        setSubmitting(false);\n      } else {\n        handleLogin(values, setSubmitting);\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, function (_ref3) {\n    var handleChange = _ref3.handleChange,\n        handleBlur = _ref3.handleBlur,\n        handleSubmit = _ref3.handleSubmit,\n        values = _ref3.values,\n        isSubmitting = _ref3.isSubmitting;\n    return React.createElement(StyledFormArea, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }, React.createElement(MyTextInput, {\n      label: \"Email Address\",\n      icon: \"mail\",\n      placeholder: \"mosesegboh@gmail.com\",\n      placeholderTextColor: darkLight,\n      onChangeText: handleChange('email'),\n      onBlur: handleBlur('email'),\n      value: values.email,\n      keyboardType: \"email-address\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 25\n      }\n    }), React.createElement(MyTextInput, {\n      label: \"Password\",\n      icon: \"lock\",\n      placeholder: \"* * * * * * \",\n      placeholderTextColor: darkLight,\n      onChangeText: handleChange('password'),\n      onBlur: handleBlur('password'),\n      value: values.password,\n      secureTextEntry: hidePassword,\n      isPassword: true,\n      hidePassword: hidePassword,\n      setHidePassword: setHidePassword,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 25\n      }\n    }), React.createElement(MsgBox, {\n      type: messageType,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }\n    }, message), !isSubmitting && React.createElement(StyledButton, {\n      onPress: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 44\n      }\n    }, React.createElement(ButtonText, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 29\n      }\n    }, \"Login\")), isSubmitting && React.createElement(StyledButton, {\n      disabled: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 43\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: primary,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 29\n      }\n    })), React.createElement(Line, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }\n    }), !googleSubmitting && React.createElement(StyledButton, {\n      google: true,\n      onPress: handleGoogleSignin,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 29\n      }\n    }, React.createElement(Fontisto, {\n      name: \"google\",\n      color: \"primary\",\n      size: 25,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 29\n      }\n    }), React.createElement(ButtonText, {\n      google: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 29\n      }\n    }, \"Sign In With Google\")), googleSubmitting && React.createElement(StyledButton, {\n      google: true,\n      disabled: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 29\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: primary,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 33\n      }\n    })), React.createElement(ExtraView, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }\n    }, React.createElement(ExtraText, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 29\n      }\n    }, \"Don't have an account already? \"), React.createElement(TextLink, {\n      onPress: function onPress() {\n        return navigation.navigate(\"SignUp\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 29\n      }\n    }, React.createElement(TextLinkContent, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 33\n      }\n    }, \"Sign Up\"))));\n  }))));\n};\n\nvar MyTextInput = function MyTextInput(_ref4) {\n  var label = _ref4.label,\n      icon = _ref4.icon,\n      hidePassword = _ref4.hidePassword,\n      isPassword = _ref4.isPassword,\n      setHidePassword = _ref4.setHidePassword,\n      props = _objectWithoutProperties(_ref4, _excluded);\n\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, React.createElement(LeftIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, React.createElement(Octicons, {\n    name: icon,\n    size: 30,\n    color: brand,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  })), React.createElement(StyledInputLabel, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }, label), React.createElement(StyledTextInput, _extends({}, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  })), isPassword && React.createElement(RightIcon, {\n    onPress: function onPress() {\n      return setHidePassword(!hidePassword);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 17\n    }\n  }, React.createElement(Ionicons, {\n    name: hidePassword ? 'md-eye-off' : 'md-eye',\n    size: 30,\n    color: darkLight,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 21\n    }\n  })));\n};\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/USER/Desktop/jobs/MyProjects/react-native/my-app/screens/Login.js"],"names":["React","useState","StatusBar","Formik","Octicons","Ionicons","Fontisto","Google","StyledContainer","InnerContainer","PageLogo","PageTitle","SubTitle","StyledFormArea","LeftIcon","StyledInputLabel","StyledTextInput","RightIcon","StyledButton","ButtonText","Colors","MsgBox","Line","ExtraView","ExtraText","TextLink","TextLinkContent","brand","darkLight","primary","KeyboardAvoidingWrapper","axios","Login","navigation","hidePassword","setHidePassword","message","setMessage","messageType","setMessageType","googleSubmitting","setGoogleSubmitting","handleLogin","credentials","setSubmitting","handleMessage","config","url","post","then","response","result","data","status","navigate","catch","error","console","log","type","handleGoogleSignin","iosClientId","androidClientId","scopes","logInAsync","user","email","name","photoUrl","setTimeout","password","values","handleChange","handleBlur","handleSubmit","isSubmitting","MyTextInput","label","icon","isPassword","props"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport { StatusBar } from 'expo-status-bar';\r\n\r\n//formik for our forms\r\nimport {Formik} from 'formik';\r\n\r\n//icons\r\nimport {Octicons, Ionicons, Fontisto} from '@expo/vector-icons';\r\n\r\n//google api client\r\nimport * as Google from 'expo-google-app-auth';\r\n\r\n\r\nimport {\r\n    StyledContainer,\r\n    InnerContainer,\r\n    PageLogo,\r\n    PageTitle,\r\n    SubTitle,\r\n    StyledFormArea,\r\n    LeftIcon,\r\n    StyledInputLabel,\r\n    StyledTextInput,\r\n    RightIcon,\r\n    StyledButton,\r\n    ButtonText,\r\n    Colors,\r\n    MsgBox,\r\n    Line,\r\n    ExtraView,\r\n    ExtraText,\r\n    TextLink,\r\n    TextLinkContent,\r\n} from './../components/styles';\r\n//activity indicator is to show the loader\r\nimport {View,ActivityIndicator } from 'react-native';\r\n\r\n//colors\r\nconst {brand, darkLight, primary} = Colors;\r\n\r\n//keyboard avaoiding view\r\nimport KeyboardAvoidingWrapper from './../components/KeyboardAvoidingWrapper';\r\n\r\n//axios\r\nimport axios from 'axios';\r\n\r\n\r\nconst Login = ({navigation}) => {\r\n    const [hidePassword, setHidePassword] = useState(true)\r\n    //state varible to handle message and message type.\r\n    const [message, setMessage] = useState();\r\n    const [messageType, setMessageType] = useState();\r\n    const [googleSubmitting, setGoogleSubmitting] = useState(false);\r\n\r\n    const handleLogin = (credentials, setSubmitting) => {\r\n        handleMessage(null);\r\n        const config = {\r\n           'Content-Type': 'application/x-www-form-urlencoded',\r\n                    'Accept': 'application/json',\r\n          };\r\n        const url = 'http://10.91.20.144:5000/user/signin'\r\n    axios.post(url, credentials, config)\r\n    .then((response)=>{\r\n        const result = response.data;\r\n        const {message, status, data} = result;\r\n\r\n        //check the status of the message, ref styled component\r\n        if( status !== 'SUCCESS' ) {\r\n            handleMessage(message, status);\r\n        }else{\r\n            navigation.navigate('Welcome', {...data[0]});\r\n        }\r\n        setSubmitting(false);\r\n\r\n    }).catch((error) => {\r\n        console.log(error);\r\n        setSubmitting(false);\r\n        handleMessage(\"An error occured. Check your network and try again!\")\r\n    });\r\n    };\r\n\r\n    //function to handle the message\r\n    const handleMessage = (message, type = 'FAILED') => {\r\n        setMessage(message);\r\n        setMessageType(type);\r\n    }\r\n\r\n    //google sign in functionality\r\n    const handleGoogleSignin = () => {\r\n        setGoogleSubmitting(true);\r\n        const config = {iosClientId: `516648526837-00s13ttt11q5aacah9imiam3kngre6o9.apps.googleusercontent.com`, \r\n                        androidClientId: `516648526837-ghdae77v0ukj8epok8jdgtoglckiabs3.apps.googleusercontent.com`,\r\n                        scopes: ['profile', 'email']\r\n                    }\r\n\r\n        Google.logInAsync(config)\r\n        .then((result) => {\r\n            const {type, user} = result;\r\n            if (type == 'success') {\r\n                const {email, name, photoUrl} = user;\r\n                handleMessage('Google Sign in successful', 'SUCCESS');\r\n                setTimeout(() => navigation.navigate('Welcome', {email, name, photoUrl}), 1000);\r\n            }else{\r\n                handleMessage('Google sign in was cancelled!')\r\n            }\r\n            setGoogleSubmitting(false);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            handleMessage('An error occured. Check your network and try again');\r\n            setGoogleSubmitting(false);\r\n        })\r\n    };\r\n\r\n    return (\r\n        <KeyboardAvoidingWrapper>\r\n        <StyledContainer>\r\n            <StatusBar style=\"dark\"/>\r\n            <InnerContainer>\r\n                <PageLogo resizeMode=\"cover\" />\r\n                <PageTitle>Escrosis</PageTitle>\r\n                <SubTitle>Account Login</SubTitle>\r\n\r\n                <Formik\r\n                     initialValues={{email: '', password: ''}}\r\n                     onSubmit={(values, {setSubmitting}) => {\r\n                        if (values.email == '' || values.password == '') {\r\n                            handleMessage('Please fill all fields');\r\n                            setSubmitting(false) \r\n                        }else{\r\n                            handleLogin(values, setSubmitting);\r\n                        }\r\n                     }}\r\n                >\r\n                    {/* issubmitting function comes from formek for handling onpress events */}\r\n                    {({handleChange, handleBlur, handleSubmit, values, isSubmitting}) => (\r\n                    <StyledFormArea>\r\n                        <MyTextInput \r\n                            label = \"Email Address\"\r\n                            icon = \"mail\"\r\n                            placeholder=\"mosesegboh@gmail.com\"\r\n                            placeholderTextColor = {darkLight}\r\n                            onChangeText = {handleChange('email')}\r\n                            onBlur = {handleBlur('email')}  \r\n                            value={values.email}\r\n                            keyboardType = \"email-address\"\r\n                        />\r\n\r\n                        <MyTextInput \r\n                            label = \"Password\"\r\n                            icon = \"lock\"\r\n                            placeholder=\"* * * * * * \"\r\n                            placeholderTextColor = {darkLight}\r\n                            onChangeText = {handleChange('password')}\r\n                            onBlur = {handleBlur('password')}  \r\n                            value={values.password}\r\n                            secureTextEntry={hidePassword}\r\n                            isPassword = {true}\r\n                            hidePassword = {hidePassword}\r\n                            setHidePassword = {setHidePassword}\r\n                        />\r\n                        <MsgBox type={messageType}>{message}</MsgBox>\r\n                        {/* if on submitting is false and true */}\r\n                        {!isSubmitting && (<StyledButton onPress={handleSubmit}>\r\n                            <ButtonText>\r\n                                Login\r\n                            </ButtonText>\r\n                        </StyledButton>)}\r\n\r\n                        {isSubmitting && (<StyledButton disabled={true}>\r\n                            <ActivityIndicator size=\"large\" color={primary} />\r\n                        </StyledButton>)}\r\n                        <Line />\r\n                        \r\n                        \r\n\r\n                        {!googleSubmitting && (\r\n                            <StyledButton google={true} onPress={handleGoogleSignin}>\r\n                            <Fontisto name=\"google\" color=\"primary\" size={25}/>\r\n                            <ButtonText google={true}>\r\n                                Sign In With Google\r\n                            </ButtonText>\r\n                        </StyledButton>\r\n                        )}\r\n\r\n                        {googleSubmitting && (\r\n                            <StyledButton google={true} disabled={true}>\r\n                                <ActivityIndicator size=\"large\" color={primary} />\r\n                            </StyledButton>\r\n                        )}\r\n                        <ExtraView>\r\n                            <ExtraText>Don't have an account already? </ExtraText>\r\n                            <TextLink onPress = {()=>navigation.navigate(\"SignUp\")}>\r\n                                <TextLinkContent>Sign Up</TextLinkContent>\r\n                            </TextLink>\r\n                        </ExtraView>\r\n                    </StyledFormArea>) }\r\n                </Formik>\r\n            </InnerContainer>\r\n        </StyledContainer>\r\n        </KeyboardAvoidingWrapper>\r\n    );\r\n};\r\n\r\nconst MyTextInput = ({label, icon,hidePassword,isPassword, setHidePassword, ...props}) => {\r\n    return (\r\n        <View>\r\n            <LeftIcon>\r\n                <Octicons name={icon} size={30} color={brand}/>\r\n            </LeftIcon>\r\n            <StyledInputLabel>{label}</StyledInputLabel>\r\n            <StyledTextInput {...props} />\r\n            {isPassword && (\r\n                <RightIcon onPress = {() => setHidePassword(!hidePassword)} > \r\n                    <Ionicons name={hidePassword ? 'md-eye-off' : 'md-eye'} size={30} color={darkLight}  />\r\n                </RightIcon>\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}