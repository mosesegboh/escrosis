{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\jobs\\\\MyProjects\\\\react-native\\\\my-app\\\\components\\\\login\\\\login.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport styles from \"./style\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport { Button } from 'react-native-elements';\nvar appId = \"1047121222092614\";\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    _classCallCheck(this, LoginScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(KeyboardAvoidingView, {\n        style: styles.containerView,\n        behavior: \"padding\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: Keyboard.dismiss,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.loginScreenContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.loginFormView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: styles.logoText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }\n      }, \"Instamobile\"), React.createElement(TextInput, {\n        placeholder: \"Username\",\n        placeholderColor: \"#c4c3cb\",\n        style: styles.loginFormTextInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }\n      }), React.createElement(TextInput, {\n        placeholder: \"Password\",\n        placeholderColor: \"#c4c3cb\",\n        style: styles.loginFormTextInput,\n        secureTextEntry: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }\n      }), React.createElement(Button, {\n        buttonStyle: styles.loginButton,\n        onPress: function onPress() {\n          return _this.onLoginPress();\n        },\n        title: \"Login\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }\n      }), React.createElement(Button, {\n        buttonStyle: styles.fbLoginButton,\n        onPress: function onPress() {\n          return _this.onFbLoginPress();\n        },\n        title: \"Login with Facebook\",\n        color: \"#3897f1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }\n      })))));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"onLoginPress\",\n    value: function onLoginPress() {}\n  }, {\n    key: \"onFbLoginPress\",\n    value: function onFbLoginPress() {\n      var _await$Expo$Facebook$, type, token, response;\n\n      return _regeneratorRuntime.async(function onFbLoginPress$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Expo.Facebook.logInWithReadPermissionsAsync(appId, {\n                permissions: ['public_profile', 'email']\n              }));\n\n            case 2:\n              _await$Expo$Facebook$ = _context.sent;\n              type = _await$Expo$Facebook$.type;\n              token = _await$Expo$Facebook$.token;\n\n              if (!(type === 'success')) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(fetch(\"https://graph.facebook.com/me?access_token=\" + token));\n\n            case 8:\n              response = _context.sent;\n              _context.t0 = Alert;\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 12:\n              _context.t1 = _context.sent.name;\n              _context.t2 = \"Hi \" + _context.t1;\n              _context.t3 = _context.t2 + \"!\";\n\n              _context.t0.alert.call(_context.t0, 'Logged in!', _context.t3);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nexport { LoginScreen as default };","map":{"version":3,"sources":["C:/Users/USER/Desktop/jobs/MyProjects/react-native/my-app/components/login/login.js"],"names":["React","Component","styles","Button","appId","LoginScreen","containerView","Keyboard","dismiss","loginScreenContainer","loginFormView","logoText","loginFormTextInput","loginButton","onLoginPress","fbLoginButton","onFbLoginPress","Expo","Facebook","logInWithReadPermissionsAsync","permissions","type","token","fetch","response","Alert","json","name","alert"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,MAAP;;;;;;;;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AAEA,IAAMC,KAAK,GAAG,kBAAd;;IAEqBC,W;;;;;;;;;;;;;WAEnB,kBAAS;AAAA;;AACP,aACE,oBAAC,oBAAD;AAAsB,QAAA,KAAK,EAAEH,MAAM,CAACI,aAApC;AAAmD,QAAA,QAAQ,EAAC,SAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA,oBAAC,wBAAD;AAA0B,QAAA,OAAO,EAAEC,QAAQ,CAACC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEN,MAAM,CAACO,oBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEP,MAAM,CAACQ,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAER,MAAM,CAACS,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADA,EAEE,oBAAC,SAAD;AAAW,QAAA,WAAW,EAAC,UAAvB;AAAkC,QAAA,gBAAgB,EAAC,SAAnD;AAA6D,QAAA,KAAK,EAAET,MAAM,CAACU,kBAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE,oBAAC,SAAD;AAAW,QAAA,WAAW,EAAC,UAAvB;AAAkC,QAAA,gBAAgB,EAAC,SAAnD;AAA6D,QAAA,KAAK,EAAEV,MAAM,CAACU,kBAA3E;AAA+F,QAAA,eAAe,EAAE,IAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EAIE,oBAAC,MAAD;AACE,QAAA,WAAW,EAAEV,MAAM,CAACW,WADtB;AAEE,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACC,YAAL,EAAN;AAAA,SAFX;AAGE,QAAA,KAAK,EAAC,OAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EASE,oBAAC,MAAD;AACE,QAAA,WAAW,EAAEZ,MAAM,CAACa,aADtB;AAEE,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACC,cAAL,EAAN;AAAA,SAFX;AAGE,QAAA,KAAK,EAAC,qBAHR;AAIE,QAAA,KAAK,EAAC,SAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,CADF,CADF,CAFA,CADF;AAyBD;;;WAED,6BAAoB,CACnB;;;WAED,gCAAuB,CACtB;;;WAED,wBAAe,CAEd;;;WAED;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACgCC,IAAI,CAACC,QAAL,CAAcC,6BAAd,CAA4Cf,KAA5C,EAAmD;AAC/EgB,gBAAAA,WAAW,EAAE,CAAC,gBAAD,EAAmB,OAAnB;AADkE,eAAnD,CADhC;;AAAA;AAAA;AACUC,cAAAA,IADV,yBACUA,IADV;AACgBC,cAAAA,KADhB,yBACgBA,KADhB;;AAAA,oBAIMD,IAAI,KAAK,SAJf;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAK2BE,KAAK,iDACoBD,KADpB,CALhC;;AAAA;AAKUE,cAAAA,QALV;AAAA,4BAOIC,KAPJ;AAAA;AAAA,+CASmBD,QAAQ,CAACE,IAAT,EATnB;;AAAA;AAAA,0CASoCC,IATpC;AAAA;AAAA;;AAAA,0BAOUC,KAPV,mBAQM,YARN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;EAxCuC3B,S;;SAApBI,W","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport styles from \"./style\";\r\nimport {Keyboard, Text, View, TextInput, TouchableWithoutFeedback, Alert, KeyboardAvoidingView} from 'react-native';\r\nimport { Button } from 'react-native-elements';\r\n\r\nconst appId = \"1047121222092614\"\r\n\r\nexport default class LoginScreen extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <KeyboardAvoidingView style={styles.containerView} behavior=\"padding\">\r\n\r\n      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n        <View style={styles.loginScreenContainer}>\r\n          <View style={styles.loginFormView}>\r\n          <Text style={styles.logoText}>Instamobile</Text>\r\n            <TextInput placeholder=\"Username\" placeholderColor=\"#c4c3cb\" style={styles.loginFormTextInput} />\r\n            <TextInput placeholder=\"Password\" placeholderColor=\"#c4c3cb\" style={styles.loginFormTextInput} secureTextEntry={true}/>\r\n            <Button\r\n              buttonStyle={styles.loginButton}\r\n              onPress={() => this.onLoginPress()}\r\n              title=\"Login\"\r\n            />\r\n            <Button\r\n              buttonStyle={styles.fbLoginButton}\r\n              onPress={() => this.onFbLoginPress()}\r\n              title=\"Login with Facebook\"\r\n              color=\"#3897f1\"\r\n            />\r\n          </View>\r\n        </View>\r\n      </TouchableWithoutFeedback>\r\n      </KeyboardAvoidingView>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  }\r\n\r\n  onLoginPress() {\r\n\r\n  }\r\n\r\n  async onFbLoginPress() {\r\n    const { type, token } = await Expo.Facebook.logInWithReadPermissionsAsync(appId, {\r\n      permissions: ['public_profile', 'email'],\r\n    });\r\n    if (type === 'success') {\r\n      const response = await fetch(\r\n        `https://graph.facebook.com/me?access_token=${token}`);\r\n      Alert.alert(\r\n        'Logged in!',\r\n        `Hi ${(await response.json()).name}!`,\r\n      );\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}